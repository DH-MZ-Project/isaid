generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(20)
  engName      String?   @map("eng_name") @db.VarChar(20)
  email        String    @unique @db.VarChar(30)
  password     String    @db.VarChar(100)
  pinCode      String?   @db.VarChar(10) //간편비밀번호
  rrn          String    @unique @db.VarChar(20)
  phone        String    @db.VarChar(20)
  address      String    @db.VarChar(100)
  telno        String?   @db.VarChar(20)
  level        Int       @default(1)
  solvedCount  Int       @default(0) @map("solved_count")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  rewardAgreed Boolean   @default(false) //퀴즈 리워드 동의 여부

  isaAccount        ISAAccount?
  investmentProfile InvestmentProfile?
  userEtfCategories UserEtfCategory[]
  quizCalendar      QuizCalendar[]

  @@map("user")
}
// 간편비빌번호, 퀴즈리워드동의 필드 추가해야함

model EtfCategory {
  id           Int     @id
  assetClass   String  @map("asset_class") @db.VarChar(50)
  assetType    String? @map("asset_type") @db.VarChar(50)
  assetSubtype String? @map("asset_subtype") @db.VarChar(50)
  fullPath     String  @map("full_path") @db.VarChar(50)

  etfs            Etf[]
  userEtfCategory UserEtfCategory[]

  @@map("etf_category")
}

model Etf {
  id                   Int       @id
  etfCategoryId        Int       @map("etf_category_id")
  issueStdCode         String?   @map("issue_std_code")
  issueCode            String?   @map("issue_code") // 종목코드
  issueName            String?   @map("issue_name") // 종목명
  issueNameKo          String?   @map("issue_name_ko") // 한글종목명
  issueNameAbbrv       String?   @map("issue_name_abbrv") // 한글종목약명
  issueNameEn          String?   @map("issue_name_en") // 영문종목명
  listDate             DateTime? @map("list_date") // 상장일
  etfObjIndexName      String?   @map("etf_obj_index_name") // 기초지수
  idxCalcInstNm1       String?   @map("idx_calc_inst_nm1") // 지수산출기관
  idxCalcInstNm2       String?   @map("idx_calc_inst_nm2") // 추적배수
  etfReplicationMethod String?   @map("etf_replication_method") // 복제방법
  idxMarketType        String?   @map("idx_market_type") // 기초시장분류
  idxAssetType         String?   @map("idx_asset_type") // 기초자산분류
  listShrs             BigInt?   @map("list_shrs") // 상장좌수
  comAbbrv             String?   @map("com_abbrv") // 운용사
  cuQtv                Int?      @map("cu_qtv") // CU수량
  etfTotalFee          Decimal?  @map("etf_total_fee") @db.Decimal(5, 2) // 총보수
  taxType              String?   @map("tax_type") // 과세유형
  return1y             Decimal?  @map("return_1y") @db.Decimal(5, 2) // 수익률(최근1년)
  traceErrRate         Decimal?  @map("trace_err_rate") @db.Decimal(5, 2) // 추적오차
  netAssetTotalAmount  BigInt?   @map("net_asset_total_amount") // 순자산총액
  divergenceRate       Decimal?  @map("divergence_rate") @db.Decimal(5, 2) //괴리율
  volatility           String? // 변동성
  riskGrade            Int?      @map("risk_grade") // 위험등급

  category           EtfCategory          @relation(fields: [etfCategoryId], references: [id])
  pdfs               EtfPdf[]
  tradings           EtfDailyTrading[]
  transactions       ETFTransaction[]
  ETFHoldingSnapshot ETFHoldingSnapshot[]
  ETFHolding         ETFHolding[]

  @@map("etf")
}

model EtfPdf {
  id                   Int      @id @default(autoincrement())
  etfId                Int      @map("etf_id")
  compstIssueCode      String?  @map("compst_issue_code") // 구성종목코드
  compstIssueName      String?  @map("compst_issue_name") // 구성종목명
  compstIssueCu1Shares Decimal? @map("compst_issue_cu1_shares") @db.Decimal(15, 2) // 주식수(계약수)
  valueAmount          BigInt?  @map("value_amount") // 평가금액
  compstAmount         BigInt?  @map("compst_amount") // 시가총액
  compstRatio          Decimal? @map("compst_ratio") @db.Decimal(5, 2) // 시가총액기준 구성비중

  etf Etf @relation(fields: [etfId], references: [id], onDelete: Cascade)

  @@map("etf_pdf")
}

model EtfDailyTrading {
  id                  Int      @id @default(autoincrement())
  etfId               Int      @map("etf_id")
  baseDate            DateTime @map("base_date") // 기준일자
  issueCode           String   @map("issue_code") // 종목코드
  issueName           String?  @map("issue_name") // 종목명
  cmpPrevddPrice      Decimal? @map("cmp_prevdd_price") @db.Decimal(10, 2) // 대비
  flucRate            Decimal? @map("fluc_rate") @db.Decimal(5, 2) // 등락률
  tddClosePrice       Decimal? @map("tdd_close_price") @db.Decimal(10, 2) //종가
  nav                 Decimal? @db.Decimal(10, 2) // 순자산가치
  tddOpenPrice        Decimal? @map("tdd_open_price") @db.Decimal(10, 2) // 시가
  tddHighPrice        Decimal? @map("tdd_high_price") @db.Decimal(10, 2) // 고가
  tddLowPrice         Decimal? @map("tdd_low_price") @db.Decimal(10, 2) // 저가
  accTradeVolume      BigInt?  @map("acc_trade_volume") // 거래량
  accTotalValue       BigInt?  @map("acc_total_value") // 거래대금
  marketCap           BigInt?  @map("market_cap") // 시가총액
  netAssetTotalAmount BigInt?  @map("net_asset_total_amount") // 순자산총액
  listShrs            BigInt?  @map("list_shrs") // 상장좌수
  idxIndNm            String?  @map("idx_ind_nm") // 기초지수_지수명
  objStkprcIdx        Decimal? @map("obj_stkprc_idx") @db.Decimal(10, 2) // 기초지수_종가
  cmpprevddIdx        Decimal? @map("cmpprevdd_idx") @db.Decimal(10, 2) // 기초지수_대비
  flucRtIdx           Decimal? @map("fluc_rt_idx") @db.Decimal(5, 2) // 기초지수_등락률

  etf Etf @relation(fields: [etfId], references: [id], onDelete: Cascade)

  @@unique([etfId, baseDate])
  @@map("etf_daily_trading")
}

enum InvestType {
  CONSERVATIVE // 안정형
  MODERATE // 안정추구형
  NEUTRAL // 위험중립형
  ACTIVE // 적극투자형
  AGGRESSIVE // 공격투자형
}

model InvestmentProfile {
  id         Int        @id @default(autoincrement())
  userId     Int        @unique @map("user_id")
  investType InvestType @map("invest_type")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investment_profile")
}

model UserEtfCategory {
  id            Int @id @default(autoincrement())
  userId        Int @map("user_id")
  etfCategoryId Int @map("etf_category_id")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  etfCategory EtfCategory @relation(fields: [etfCategoryId], references: [id], onDelete: Cascade)

  @@unique([userId, etfCategoryId])
  @@map("user_etf_category")
}

model QuizCalendar {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  solvedDate DateTime @map("solved_date")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, solvedDate])
  @@map("quiz_calendar")
}

model Question {
  id      Int    @id @default(autoincrement())
  content String @db.VarChar(100)

  selections Selection[]

  @@map("question")
}

model Selection {
  id          Int     @id @default(autoincrement())
  questionId  Int     @map("question_id")
  content     String  @db.VarChar(100)
  answerFlag  Boolean @map("answer_flag")
  description String? @db.Text

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, content])
  @@map("selection")
}

model ISAAccount {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  bankCode       String   @db.VarChar(30)
  accountNum     String   @unique
  connectedAt    DateTime
  currentBalance Int
  accountType    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  etfHolding             ETFHolding[]
  generalHolding         GeneralHolding[]
  etfTransaction         ETFTransaction[]
  generalTransaction     GeneralTransaction[]
  GeneralHoldingSnapshot GeneralHoldingSnapshot[]
  ETFHoldingSnapshot     ETFHoldingSnapshot[]
  MonthlyReturn          MonthlyReturn[]

  @@map("isa_account")
}

// 상품 테이블 (FUND, ELS, BOND)
model FinancialProduct {
  id          Int            @id @default(autoincrement())
  type        InstrumentType
  productName String

  generalHoldings     GeneralHolding[]
  generalTransactions GeneralTransaction[]
  monthlyReturns      MonthlyReturn[]
  snapshots           GeneralHoldingSnapshot[]

  @@map("financial_product")
}

enum InstrumentType {
  FUND
  ELS
  BOND
}

// 월초,월말 평가금
model GeneralHoldingSnapshot {
  id              Int            @id @default(autoincrement())
  isaAccountId    Int
  productId       Int
  productType     InstrumentType
  snapshotDate    DateTime
  evaluatedAmount Decimal        @db.Decimal(20, 2)

  isaAccount ISAAccount       @relation(fields: [isaAccountId], references: [id], onDelete: Cascade)
  product    FinancialProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([isaAccountId, productId, snapshotDate])
  @@map("general_holding_snapshot")
}

// 월초, 월말 평가금
model ETFHoldingSnapshot {
  id              Int      @id @default(autoincrement())
  isaAccountId    Int
  etfId           Int
  snapshotDate    DateTime
  evaluatedAmount Decimal  @db.Decimal(20, 2)

  isaAccount ISAAccount @relation(fields: [isaAccountId], references: [id], onDelete: Cascade)
  etf        Etf        @relation(fields: [etfId], references: [id], onDelete: Cascade)

  @@unique([isaAccountId, etfId, snapshotDate])
  @@map("etf_holding_snapshot")
}

model ETFHolding {
  id           Int      @id @default(autoincrement())
  etfId        Int
  isaAccountId Int
  quantity     Decimal  @db.Decimal(20, 6)
  avgCost      Decimal? @db.Decimal(20, 2)
  acquiredAt   DateTime
  updatedAt    DateTime

  etf        Etf        @relation(fields: [etfId], references: [id], onDelete: Cascade)
  isaAccount ISAAccount @relation(fields: [isaAccountId], references: [id], onDelete: Cascade)

  @@map("etf_holding")
}

// 채권, 펀드, ELS -> 현금투자
model GeneralHolding {
  id           Int      @id @default(autoincrement())
  productId    Int
  isaAccountId Int
  totalCost    Decimal? @db.Decimal(20, 2)
  acquiredAt   DateTime
  updatedAt    DateTime

  product    FinancialProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  isaAccount ISAAccount       @relation(fields: [isaAccountId], references: [id], onDelete: Cascade)

  @@map("general_holding")
}

model ETFTransaction {
  id            Int             @id @default(autoincrement())
  etfId         Int
  isaAccountId  Int
  type          TransactionType
  quantity      Decimal         @db.Decimal(20, 6)
  price         Decimal         @db.Decimal(20, 6)
  transactionAt DateTime

  etf        Etf        @relation(fields: [etfId], references: [id], onDelete: Cascade)
  isaAccount ISAAccount @relation(fields: [isaAccountId], references: [id], onDelete: Cascade)

  @@map("etf_transaction")
}

model GeneralTransaction {
  id            Int             @id @default(autoincrement())
  productId     Int
  isaAccountId  Int
  type          TransactionType
  price         Decimal?        @db.Decimal(20, 6)
  transactionAt DateTime

  product    FinancialProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  isaAccount ISAAccount       @relation(fields: [isaAccountId], references: [id], onDelete: Cascade)

  @@map("general_transaction")
}

enum TransactionType {
  BUY
  SELL
  DIVIDEND //배당금
  INTEREST //이자
}

// 계좌별 월별 수익률
model MonthlyReturn {
  id           Int      @id @default(autoincrement())
  isaAccountId Int
  baseDate     DateTime
  entireProfit Decimal  @db.Decimal(20, 6) // General, eft 상품에 대한 전체 수익률 +배당금,이자

  isaAccount         ISAAccount        @relation(fields: [isaAccountId], references: [id], onDelete: Cascade)
  FinancialProduct   FinancialProduct? @relation(fields: [financialProductId], references: [id])
  financialProductId Int?

  @@unique([isaAccountId, baseDate])
  @@map("monthly_return")
}
